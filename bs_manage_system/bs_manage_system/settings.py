# encoding:utf-8
"""
Django settings for science_manage project.

Generated by 'django-admin startproject' using Django 1.8.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(5%2te-g^x-^nuffq_e6tao8g)1+gwvx0uq$&29ae0e26l1rhn'

# SECURITY WARNING: don't run with debug turned on in production!
# 上线时DEBUG设置为FALSE
DEBUG = True

#  指定被访问的主机。若元素为'*'，表示所有同一局域网内的网络均可被访问
ALLOWED_HOSTS = ['*']

# Application definition
# App加载
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # install your app
    'public_module',
    'error_pages',
)

# 中间件
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',  # 缓存配置，必须排在第一个
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',  # 依赖于会话Session
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 防止点击劫持
    'django.middleware.security.SecurityMiddleware',  # 缓存配置，必须在最后一个
)

# 总路由设置
ROOT_URLCONF = 'bs_manage_system.urls'

# 项目路径
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT, PROJECT_MODULE_NAME = os.path.split(PROJECT_PATH)
BASE_DIR = os.path.dirname(os.path.dirname(PROJECT_PATH))
PYTHON_BIN = os.path.dirname(sys.executable)

MAKO_TEMPLATE_DIR = os.path.join(PROJECT_ROOT, 'templates')
MAKO_TEMPLATE_MODULE_DIR = os.path.join(BASE_DIR, 'templates_module')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_ROOT, 'templates')],  # 页面配置
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.request',
                'django.template.context_processors.csrf',
                'public_module.context_processors.mysetting',  # 自定义模版context，可在页面中使用STATIC_URL等变量
                'django.template.context_processors.i18n',
                # 'django.template.context_processors.debug',
                # 'django.template.context_processors.request',
                # 'public_module.context_processors.mysetting',   # 自定义模版context，可在页面中使用STATIC_URL等变量
                # 'django.contrib.auth.context_processors.auth',
                # 'django.contrib.messages.STATICFILES_DIRS.messages',
            ],
            'debug': DEBUG
        },
    },
]

WSGI_APPLICATION = 'bs_manage_system.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
try:
    import pymysql

    pymysql.install_as_MySQLdb()
finally:
    pass

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认用mysql
        'NAME': 'science_manage',  # 数据库名 (默认与APP_ID相同)
        'USER': 'root',  # 你的数据库user
        'PASSWORD': '123456',  # 你的数据库password
        # 'HOST': '127.0.0.1',                                # 开发的时候，使用localhost
        'HOST': '47.102.195.55',  # 开发的时候，使用localhost
        'PORT': '3306',  # 默认3306
    },
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

# ==============================================================================
# Django 项目配置
# ==============================================================================

# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'

LANGUAGE_CODE = 'zh-CN'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
    # os.path.join(PROJECT_ROOT, 'vue-element-admin-master/dist/static'),
)
STATIC_VERSION = 0.1
# 应用本地静态资源目录
# 静态资源context_processors置
STATIC_URL = '/static/'

# 应用访问路径
SITE_URL = '/'

# CSRF的COOKIE域，默认使用当前域
# CSRF_COOKIE_DOMAIN =''
CSRF_COOKIE_PATH = SITE_URL

# 邮箱服务配置
EMAIL_HOST = 'xxx.com.cn'  # 发送者邮箱服务器
EMAIL_PORT = 25
EMAIL_HOST_USER = ''  # 发送者用户名（邮箱地址）
EMAIL_HOST_PASSWORD = ''  # 发送者密码
EMAIL_USE_SSL = False

# ==============================================================================
# logging
# ==============================================================================
# 应用日志配置
BK_LOG_DIR = os.environ.get('BK_LOG_DIR', '/data/paas/apps/logs/')
LOGGING_DIR = os.path.join(BASE_DIR, 'logs')
LOG_CLASS = 'logging.handlers.RotatingFileHandler'
LOG_LEVEL = 'DEBUG'

# 自动建立日志目录
if not os.path.exists(LOGGING_DIR):
    try:
        os.makedirs(LOGGING_DIR)
    except:
        pass

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s [%(asctime)s] %(pathname)s %(lineno)d %(funcName)s %(process)d %(thread)d \n \t %(message)s \n',
            # noqa
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s \n'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'django.utils.log.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'root': {
            'class': LOG_CLASS,
            'formatter': 'verbose',
            'filename': os.path.join(LOGGING_DIR, 'db_manage_system.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5
        },
        'component': {
            'class': LOG_CLASS,
            'formatter': 'verbose',
            'filename': os.path.join(LOGGING_DIR, 'component.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5
        },
        'wb_mysql': {
            'class': LOG_CLASS,
            'formatter': 'verbose',
            'filename': os.path.join(LOGGING_DIR, 'wb_mysql.log'),
            'maxBytes': 1024 * 1024 * 4,
            'backupCount': 5
        },
    },
    'loggers': {
        'django': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
        # the root logger ,用于整个project的logger
        'root': {
            'handlers': ['root'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        # 组件调用日志
        'component': {
            'handlers': ['component'],
            'level': 'WARN',
            'propagate': True,
        },
        # other loggers...
        'django.db.backends': {
            'handlers': ['wb_mysql'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
